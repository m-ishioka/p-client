// Code generated by entproto. DO NOT EDIT.

// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file entpb.proto (package entpb, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message entpb.ProcessType
 */
export class ProcessType extends Message<ProcessType> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: repeated entpb.Project projects = 3;
   */
  projects: Project[] = [];

  constructor(data?: PartialMessage<ProcessType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.ProcessType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "projects", kind: "message", T: Project, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessType {
    return new ProcessType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessType {
    return new ProcessType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessType {
    return new ProcessType().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessType | PlainMessage<ProcessType> | undefined, b: ProcessType | PlainMessage<ProcessType> | undefined): boolean {
    return proto3.util.equals(ProcessType, a, b);
  }
}

/**
 * @generated from message entpb.CreateProcessTypeRequest
 */
export class CreateProcessTypeRequest extends Message<CreateProcessTypeRequest> {
  /**
   * @generated from field: entpb.ProcessType process_type = 1;
   */
  processType?: ProcessType;

  constructor(data?: PartialMessage<CreateProcessTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.CreateProcessTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "process_type", kind: "message", T: ProcessType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProcessTypeRequest {
    return new CreateProcessTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProcessTypeRequest {
    return new CreateProcessTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProcessTypeRequest {
    return new CreateProcessTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProcessTypeRequest | PlainMessage<CreateProcessTypeRequest> | undefined, b: CreateProcessTypeRequest | PlainMessage<CreateProcessTypeRequest> | undefined): boolean {
    return proto3.util.equals(CreateProcessTypeRequest, a, b);
  }
}

/**
 * @generated from message entpb.GetProcessTypeRequest
 */
export class GetProcessTypeRequest extends Message<GetProcessTypeRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: entpb.GetProcessTypeRequest.View view = 2;
   */
  view = GetProcessTypeRequest_View.VIEW_UNSPECIFIED;

  constructor(data?: PartialMessage<GetProcessTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.GetProcessTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "view", kind: "enum", T: proto3.getEnumType(GetProcessTypeRequest_View) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProcessTypeRequest {
    return new GetProcessTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProcessTypeRequest {
    return new GetProcessTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProcessTypeRequest {
    return new GetProcessTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProcessTypeRequest | PlainMessage<GetProcessTypeRequest> | undefined, b: GetProcessTypeRequest | PlainMessage<GetProcessTypeRequest> | undefined): boolean {
    return proto3.util.equals(GetProcessTypeRequest, a, b);
  }
}

/**
 * @generated from enum entpb.GetProcessTypeRequest.View
 */
export enum GetProcessTypeRequest_View {
  /**
   * @generated from enum value: VIEW_UNSPECIFIED = 0;
   */
  VIEW_UNSPECIFIED = 0,

  /**
   * @generated from enum value: BASIC = 1;
   */
  BASIC = 1,

  /**
   * @generated from enum value: WITH_EDGE_IDS = 2;
   */
  WITH_EDGE_IDS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(GetProcessTypeRequest_View)
proto3.util.setEnumType(GetProcessTypeRequest_View, "entpb.GetProcessTypeRequest.View", [
  { no: 0, name: "VIEW_UNSPECIFIED" },
  { no: 1, name: "BASIC" },
  { no: 2, name: "WITH_EDGE_IDS" },
]);

/**
 * @generated from message entpb.UpdateProcessTypeRequest
 */
export class UpdateProcessTypeRequest extends Message<UpdateProcessTypeRequest> {
  /**
   * @generated from field: entpb.ProcessType process_type = 1;
   */
  processType?: ProcessType;

  constructor(data?: PartialMessage<UpdateProcessTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.UpdateProcessTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "process_type", kind: "message", T: ProcessType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProcessTypeRequest {
    return new UpdateProcessTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProcessTypeRequest {
    return new UpdateProcessTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProcessTypeRequest {
    return new UpdateProcessTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateProcessTypeRequest | PlainMessage<UpdateProcessTypeRequest> | undefined, b: UpdateProcessTypeRequest | PlainMessage<UpdateProcessTypeRequest> | undefined): boolean {
    return proto3.util.equals(UpdateProcessTypeRequest, a, b);
  }
}

/**
 * @generated from message entpb.DeleteProcessTypeRequest
 */
export class DeleteProcessTypeRequest extends Message<DeleteProcessTypeRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<DeleteProcessTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.DeleteProcessTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProcessTypeRequest {
    return new DeleteProcessTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProcessTypeRequest {
    return new DeleteProcessTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProcessTypeRequest {
    return new DeleteProcessTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteProcessTypeRequest | PlainMessage<DeleteProcessTypeRequest> | undefined, b: DeleteProcessTypeRequest | PlainMessage<DeleteProcessTypeRequest> | undefined): boolean {
    return proto3.util.equals(DeleteProcessTypeRequest, a, b);
  }
}

/**
 * @generated from message entpb.ListProcessTypeRequest
 */
export class ListProcessTypeRequest extends Message<ListProcessTypeRequest> {
  /**
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  /**
   * @generated from field: entpb.ListProcessTypeRequest.View view = 3;
   */
  view = ListProcessTypeRequest_View.VIEW_UNSPECIFIED;

  constructor(data?: PartialMessage<ListProcessTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.ListProcessTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "view", kind: "enum", T: proto3.getEnumType(ListProcessTypeRequest_View) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProcessTypeRequest {
    return new ListProcessTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProcessTypeRequest {
    return new ListProcessTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProcessTypeRequest {
    return new ListProcessTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListProcessTypeRequest | PlainMessage<ListProcessTypeRequest> | undefined, b: ListProcessTypeRequest | PlainMessage<ListProcessTypeRequest> | undefined): boolean {
    return proto3.util.equals(ListProcessTypeRequest, a, b);
  }
}

/**
 * @generated from enum entpb.ListProcessTypeRequest.View
 */
export enum ListProcessTypeRequest_View {
  /**
   * @generated from enum value: VIEW_UNSPECIFIED = 0;
   */
  VIEW_UNSPECIFIED = 0,

  /**
   * @generated from enum value: BASIC = 1;
   */
  BASIC = 1,

  /**
   * @generated from enum value: WITH_EDGE_IDS = 2;
   */
  WITH_EDGE_IDS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ListProcessTypeRequest_View)
proto3.util.setEnumType(ListProcessTypeRequest_View, "entpb.ListProcessTypeRequest.View", [
  { no: 0, name: "VIEW_UNSPECIFIED" },
  { no: 1, name: "BASIC" },
  { no: 2, name: "WITH_EDGE_IDS" },
]);

/**
 * @generated from message entpb.ListProcessTypeResponse
 */
export class ListProcessTypeResponse extends Message<ListProcessTypeResponse> {
  /**
   * @generated from field: repeated entpb.ProcessType process_type_list = 1;
   */
  processTypeList: ProcessType[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListProcessTypeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.ListProcessTypeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "process_type_list", kind: "message", T: ProcessType, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProcessTypeResponse {
    return new ListProcessTypeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProcessTypeResponse {
    return new ListProcessTypeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProcessTypeResponse {
    return new ListProcessTypeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListProcessTypeResponse | PlainMessage<ListProcessTypeResponse> | undefined, b: ListProcessTypeResponse | PlainMessage<ListProcessTypeResponse> | undefined): boolean {
    return proto3.util.equals(ListProcessTypeResponse, a, b);
  }
}

/**
 * @generated from message entpb.BatchCreateProcessTypesRequest
 */
export class BatchCreateProcessTypesRequest extends Message<BatchCreateProcessTypesRequest> {
  /**
   * @generated from field: repeated entpb.CreateProcessTypeRequest requests = 1;
   */
  requests: CreateProcessTypeRequest[] = [];

  constructor(data?: PartialMessage<BatchCreateProcessTypesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.BatchCreateProcessTypesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requests", kind: "message", T: CreateProcessTypeRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCreateProcessTypesRequest {
    return new BatchCreateProcessTypesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCreateProcessTypesRequest {
    return new BatchCreateProcessTypesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCreateProcessTypesRequest {
    return new BatchCreateProcessTypesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BatchCreateProcessTypesRequest | PlainMessage<BatchCreateProcessTypesRequest> | undefined, b: BatchCreateProcessTypesRequest | PlainMessage<BatchCreateProcessTypesRequest> | undefined): boolean {
    return proto3.util.equals(BatchCreateProcessTypesRequest, a, b);
  }
}

/**
 * @generated from message entpb.BatchCreateProcessTypesResponse
 */
export class BatchCreateProcessTypesResponse extends Message<BatchCreateProcessTypesResponse> {
  /**
   * @generated from field: repeated entpb.ProcessType process_types = 1;
   */
  processTypes: ProcessType[] = [];

  constructor(data?: PartialMessage<BatchCreateProcessTypesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.BatchCreateProcessTypesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "process_types", kind: "message", T: ProcessType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCreateProcessTypesResponse {
    return new BatchCreateProcessTypesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCreateProcessTypesResponse {
    return new BatchCreateProcessTypesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCreateProcessTypesResponse {
    return new BatchCreateProcessTypesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BatchCreateProcessTypesResponse | PlainMessage<BatchCreateProcessTypesResponse> | undefined, b: BatchCreateProcessTypesResponse | PlainMessage<BatchCreateProcessTypesResponse> | undefined): boolean {
    return proto3.util.equals(BatchCreateProcessTypesResponse, a, b);
  }
}

/**
 * @generated from message entpb.Project
 */
export class Project extends Message<Project> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string IDKey = 2;
   */
  IDKey = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: google.protobuf.Timestamp start_date = 4;
   */
  startDate?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end_date = 5;
   */
  endDate?: Timestamp;

  /**
   * @generated from field: string role = 6;
   */
  role = "";

  /**
   * @generated from field: int64 scale = 7;
   */
  scale = protoInt64.zero;

  /**
   * @generated from field: bytes description = 8;
   */
  description = new Uint8Array(0);

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 9;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 10;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: repeated entpb.Skill skills = 11;
   */
  skills: Skill[] = [];

  /**
   * @generated from field: repeated entpb.ProcessType processTypes = 12;
   */
  processTypes: ProcessType[] = [];

  constructor(data?: PartialMessage<Project>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.Project";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "IDKey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "start_date", kind: "message", T: Timestamp },
    { no: 5, name: "end_date", kind: "message", T: Timestamp },
    { no: 6, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "scale", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "description", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 9, name: "created_at", kind: "message", T: Timestamp },
    { no: 10, name: "updated_at", kind: "message", T: Timestamp },
    { no: 11, name: "skills", kind: "message", T: Skill, repeated: true },
    { no: 12, name: "processTypes", kind: "message", T: ProcessType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Project {
    return new Project().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJsonString(jsonString, options);
  }

  static equals(a: Project | PlainMessage<Project> | undefined, b: Project | PlainMessage<Project> | undefined): boolean {
    return proto3.util.equals(Project, a, b);
  }
}

/**
 * @generated from message entpb.CreateProjectRequest
 */
export class CreateProjectRequest extends Message<CreateProjectRequest> {
  /**
   * @generated from field: entpb.Project project = 1;
   */
  project?: Project;

  constructor(data?: PartialMessage<CreateProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.CreateProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProjectRequest {
    return new CreateProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProjectRequest {
    return new CreateProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProjectRequest {
    return new CreateProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProjectRequest | PlainMessage<CreateProjectRequest> | undefined, b: CreateProjectRequest | PlainMessage<CreateProjectRequest> | undefined): boolean {
    return proto3.util.equals(CreateProjectRequest, a, b);
  }
}

/**
 * @generated from message entpb.GetProjectRequest
 */
export class GetProjectRequest extends Message<GetProjectRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: entpb.GetProjectRequest.View view = 2;
   */
  view = GetProjectRequest_View.VIEW_UNSPECIFIED;

  constructor(data?: PartialMessage<GetProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.GetProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "view", kind: "enum", T: proto3.getEnumType(GetProjectRequest_View) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectRequest {
    return new GetProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectRequest {
    return new GetProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectRequest {
    return new GetProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProjectRequest | PlainMessage<GetProjectRequest> | undefined, b: GetProjectRequest | PlainMessage<GetProjectRequest> | undefined): boolean {
    return proto3.util.equals(GetProjectRequest, a, b);
  }
}

/**
 * @generated from enum entpb.GetProjectRequest.View
 */
export enum GetProjectRequest_View {
  /**
   * @generated from enum value: VIEW_UNSPECIFIED = 0;
   */
  VIEW_UNSPECIFIED = 0,

  /**
   * @generated from enum value: BASIC = 1;
   */
  BASIC = 1,

  /**
   * @generated from enum value: WITH_EDGE_IDS = 2;
   */
  WITH_EDGE_IDS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(GetProjectRequest_View)
proto3.util.setEnumType(GetProjectRequest_View, "entpb.GetProjectRequest.View", [
  { no: 0, name: "VIEW_UNSPECIFIED" },
  { no: 1, name: "BASIC" },
  { no: 2, name: "WITH_EDGE_IDS" },
]);

/**
 * @generated from message entpb.UpdateProjectRequest
 */
export class UpdateProjectRequest extends Message<UpdateProjectRequest> {
  /**
   * @generated from field: entpb.Project project = 1;
   */
  project?: Project;

  constructor(data?: PartialMessage<UpdateProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.UpdateProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProjectRequest {
    return new UpdateProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProjectRequest {
    return new UpdateProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProjectRequest {
    return new UpdateProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateProjectRequest | PlainMessage<UpdateProjectRequest> | undefined, b: UpdateProjectRequest | PlainMessage<UpdateProjectRequest> | undefined): boolean {
    return proto3.util.equals(UpdateProjectRequest, a, b);
  }
}

/**
 * @generated from message entpb.DeleteProjectRequest
 */
export class DeleteProjectRequest extends Message<DeleteProjectRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<DeleteProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.DeleteProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProjectRequest {
    return new DeleteProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProjectRequest {
    return new DeleteProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProjectRequest {
    return new DeleteProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteProjectRequest | PlainMessage<DeleteProjectRequest> | undefined, b: DeleteProjectRequest | PlainMessage<DeleteProjectRequest> | undefined): boolean {
    return proto3.util.equals(DeleteProjectRequest, a, b);
  }
}

/**
 * @generated from message entpb.ListProjectRequest
 */
export class ListProjectRequest extends Message<ListProjectRequest> {
  /**
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  /**
   * @generated from field: entpb.ListProjectRequest.View view = 3;
   */
  view = ListProjectRequest_View.VIEW_UNSPECIFIED;

  constructor(data?: PartialMessage<ListProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.ListProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "view", kind: "enum", T: proto3.getEnumType(ListProjectRequest_View) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectRequest {
    return new ListProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectRequest {
    return new ListProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectRequest {
    return new ListProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListProjectRequest | PlainMessage<ListProjectRequest> | undefined, b: ListProjectRequest | PlainMessage<ListProjectRequest> | undefined): boolean {
    return proto3.util.equals(ListProjectRequest, a, b);
  }
}

/**
 * @generated from enum entpb.ListProjectRequest.View
 */
export enum ListProjectRequest_View {
  /**
   * @generated from enum value: VIEW_UNSPECIFIED = 0;
   */
  VIEW_UNSPECIFIED = 0,

  /**
   * @generated from enum value: BASIC = 1;
   */
  BASIC = 1,

  /**
   * @generated from enum value: WITH_EDGE_IDS = 2;
   */
  WITH_EDGE_IDS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ListProjectRequest_View)
proto3.util.setEnumType(ListProjectRequest_View, "entpb.ListProjectRequest.View", [
  { no: 0, name: "VIEW_UNSPECIFIED" },
  { no: 1, name: "BASIC" },
  { no: 2, name: "WITH_EDGE_IDS" },
]);

/**
 * @generated from message entpb.ListProjectResponse
 */
export class ListProjectResponse extends Message<ListProjectResponse> {
  /**
   * @generated from field: repeated entpb.Project project_list = 1;
   */
  projectList: Project[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.ListProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_list", kind: "message", T: Project, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectResponse {
    return new ListProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectResponse {
    return new ListProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectResponse {
    return new ListProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListProjectResponse | PlainMessage<ListProjectResponse> | undefined, b: ListProjectResponse | PlainMessage<ListProjectResponse> | undefined): boolean {
    return proto3.util.equals(ListProjectResponse, a, b);
  }
}

/**
 * @generated from message entpb.BatchCreateProjectsRequest
 */
export class BatchCreateProjectsRequest extends Message<BatchCreateProjectsRequest> {
  /**
   * @generated from field: repeated entpb.CreateProjectRequest requests = 1;
   */
  requests: CreateProjectRequest[] = [];

  constructor(data?: PartialMessage<BatchCreateProjectsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.BatchCreateProjectsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requests", kind: "message", T: CreateProjectRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCreateProjectsRequest {
    return new BatchCreateProjectsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCreateProjectsRequest {
    return new BatchCreateProjectsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCreateProjectsRequest {
    return new BatchCreateProjectsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BatchCreateProjectsRequest | PlainMessage<BatchCreateProjectsRequest> | undefined, b: BatchCreateProjectsRequest | PlainMessage<BatchCreateProjectsRequest> | undefined): boolean {
    return proto3.util.equals(BatchCreateProjectsRequest, a, b);
  }
}

/**
 * @generated from message entpb.BatchCreateProjectsResponse
 */
export class BatchCreateProjectsResponse extends Message<BatchCreateProjectsResponse> {
  /**
   * @generated from field: repeated entpb.Project projects = 1;
   */
  projects: Project[] = [];

  constructor(data?: PartialMessage<BatchCreateProjectsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.BatchCreateProjectsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "projects", kind: "message", T: Project, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCreateProjectsResponse {
    return new BatchCreateProjectsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCreateProjectsResponse {
    return new BatchCreateProjectsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCreateProjectsResponse {
    return new BatchCreateProjectsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BatchCreateProjectsResponse | PlainMessage<BatchCreateProjectsResponse> | undefined, b: BatchCreateProjectsResponse | PlainMessage<BatchCreateProjectsResponse> | undefined): boolean {
    return proto3.util.equals(BatchCreateProjectsResponse, a, b);
  }
}

/**
 * @generated from message entpb.Skill
 */
export class Skill extends Message<Skill> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string IDKey = 3;
   */
  IDKey = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string iconName = 4;
   */
  iconName = "";

  /**
   * @generated from field: int64 level = 5;
   */
  level = protoInt64.zero;

  /**
   * @generated from field: float experience = 6;
   */
  experience = 0;

  /**
   * @generated from field: bytes description = 7;
   */
  description = new Uint8Array(0);

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 8;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 9;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: entpb.SkillType skillType = 10;
   */
  skillType?: SkillType;

  /**
   * @generated from field: repeated entpb.Project projects = 11;
   */
  projects: Project[] = [];

  constructor(data?: PartialMessage<Skill>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.Skill";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "IDKey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "iconName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "level", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "experience", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 7, name: "description", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "created_at", kind: "message", T: Timestamp },
    { no: 9, name: "updated_at", kind: "message", T: Timestamp },
    { no: 10, name: "skillType", kind: "message", T: SkillType },
    { no: 11, name: "projects", kind: "message", T: Project, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Skill {
    return new Skill().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Skill {
    return new Skill().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Skill {
    return new Skill().fromJsonString(jsonString, options);
  }

  static equals(a: Skill | PlainMessage<Skill> | undefined, b: Skill | PlainMessage<Skill> | undefined): boolean {
    return proto3.util.equals(Skill, a, b);
  }
}

/**
 * @generated from message entpb.CreateSkillRequest
 */
export class CreateSkillRequest extends Message<CreateSkillRequest> {
  /**
   * @generated from field: entpb.Skill skill = 1;
   */
  skill?: Skill;

  constructor(data?: PartialMessage<CreateSkillRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.CreateSkillRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "skill", kind: "message", T: Skill },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSkillRequest {
    return new CreateSkillRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSkillRequest {
    return new CreateSkillRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSkillRequest {
    return new CreateSkillRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSkillRequest | PlainMessage<CreateSkillRequest> | undefined, b: CreateSkillRequest | PlainMessage<CreateSkillRequest> | undefined): boolean {
    return proto3.util.equals(CreateSkillRequest, a, b);
  }
}

/**
 * @generated from message entpb.GetSkillRequest
 */
export class GetSkillRequest extends Message<GetSkillRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: entpb.GetSkillRequest.View view = 2;
   */
  view = GetSkillRequest_View.VIEW_UNSPECIFIED;

  constructor(data?: PartialMessage<GetSkillRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.GetSkillRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "view", kind: "enum", T: proto3.getEnumType(GetSkillRequest_View) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSkillRequest {
    return new GetSkillRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSkillRequest {
    return new GetSkillRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSkillRequest {
    return new GetSkillRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSkillRequest | PlainMessage<GetSkillRequest> | undefined, b: GetSkillRequest | PlainMessage<GetSkillRequest> | undefined): boolean {
    return proto3.util.equals(GetSkillRequest, a, b);
  }
}

/**
 * @generated from enum entpb.GetSkillRequest.View
 */
export enum GetSkillRequest_View {
  /**
   * @generated from enum value: VIEW_UNSPECIFIED = 0;
   */
  VIEW_UNSPECIFIED = 0,

  /**
   * @generated from enum value: BASIC = 1;
   */
  BASIC = 1,

  /**
   * @generated from enum value: WITH_EDGE_IDS = 2;
   */
  WITH_EDGE_IDS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(GetSkillRequest_View)
proto3.util.setEnumType(GetSkillRequest_View, "entpb.GetSkillRequest.View", [
  { no: 0, name: "VIEW_UNSPECIFIED" },
  { no: 1, name: "BASIC" },
  { no: 2, name: "WITH_EDGE_IDS" },
]);

/**
 * @generated from message entpb.UpdateSkillRequest
 */
export class UpdateSkillRequest extends Message<UpdateSkillRequest> {
  /**
   * @generated from field: entpb.Skill skill = 1;
   */
  skill?: Skill;

  constructor(data?: PartialMessage<UpdateSkillRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.UpdateSkillRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "skill", kind: "message", T: Skill },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSkillRequest {
    return new UpdateSkillRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSkillRequest {
    return new UpdateSkillRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSkillRequest {
    return new UpdateSkillRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSkillRequest | PlainMessage<UpdateSkillRequest> | undefined, b: UpdateSkillRequest | PlainMessage<UpdateSkillRequest> | undefined): boolean {
    return proto3.util.equals(UpdateSkillRequest, a, b);
  }
}

/**
 * @generated from message entpb.DeleteSkillRequest
 */
export class DeleteSkillRequest extends Message<DeleteSkillRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<DeleteSkillRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.DeleteSkillRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSkillRequest {
    return new DeleteSkillRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSkillRequest {
    return new DeleteSkillRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSkillRequest {
    return new DeleteSkillRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSkillRequest | PlainMessage<DeleteSkillRequest> | undefined, b: DeleteSkillRequest | PlainMessage<DeleteSkillRequest> | undefined): boolean {
    return proto3.util.equals(DeleteSkillRequest, a, b);
  }
}

/**
 * @generated from message entpb.ListSkillRequest
 */
export class ListSkillRequest extends Message<ListSkillRequest> {
  /**
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  /**
   * @generated from field: entpb.ListSkillRequest.View view = 3;
   */
  view = ListSkillRequest_View.VIEW_UNSPECIFIED;

  constructor(data?: PartialMessage<ListSkillRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.ListSkillRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "view", kind: "enum", T: proto3.getEnumType(ListSkillRequest_View) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSkillRequest {
    return new ListSkillRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSkillRequest {
    return new ListSkillRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSkillRequest {
    return new ListSkillRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSkillRequest | PlainMessage<ListSkillRequest> | undefined, b: ListSkillRequest | PlainMessage<ListSkillRequest> | undefined): boolean {
    return proto3.util.equals(ListSkillRequest, a, b);
  }
}

/**
 * @generated from enum entpb.ListSkillRequest.View
 */
export enum ListSkillRequest_View {
  /**
   * @generated from enum value: VIEW_UNSPECIFIED = 0;
   */
  VIEW_UNSPECIFIED = 0,

  /**
   * @generated from enum value: BASIC = 1;
   */
  BASIC = 1,

  /**
   * @generated from enum value: WITH_EDGE_IDS = 2;
   */
  WITH_EDGE_IDS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ListSkillRequest_View)
proto3.util.setEnumType(ListSkillRequest_View, "entpb.ListSkillRequest.View", [
  { no: 0, name: "VIEW_UNSPECIFIED" },
  { no: 1, name: "BASIC" },
  { no: 2, name: "WITH_EDGE_IDS" },
]);

/**
 * @generated from message entpb.ListSkillResponse
 */
export class ListSkillResponse extends Message<ListSkillResponse> {
  /**
   * @generated from field: repeated entpb.Skill skill_list = 1;
   */
  skillList: Skill[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListSkillResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.ListSkillResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "skill_list", kind: "message", T: Skill, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSkillResponse {
    return new ListSkillResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSkillResponse {
    return new ListSkillResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSkillResponse {
    return new ListSkillResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSkillResponse | PlainMessage<ListSkillResponse> | undefined, b: ListSkillResponse | PlainMessage<ListSkillResponse> | undefined): boolean {
    return proto3.util.equals(ListSkillResponse, a, b);
  }
}

/**
 * @generated from message entpb.BatchCreateSkillsRequest
 */
export class BatchCreateSkillsRequest extends Message<BatchCreateSkillsRequest> {
  /**
   * @generated from field: repeated entpb.CreateSkillRequest requests = 1;
   */
  requests: CreateSkillRequest[] = [];

  constructor(data?: PartialMessage<BatchCreateSkillsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.BatchCreateSkillsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requests", kind: "message", T: CreateSkillRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCreateSkillsRequest {
    return new BatchCreateSkillsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCreateSkillsRequest {
    return new BatchCreateSkillsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCreateSkillsRequest {
    return new BatchCreateSkillsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BatchCreateSkillsRequest | PlainMessage<BatchCreateSkillsRequest> | undefined, b: BatchCreateSkillsRequest | PlainMessage<BatchCreateSkillsRequest> | undefined): boolean {
    return proto3.util.equals(BatchCreateSkillsRequest, a, b);
  }
}

/**
 * @generated from message entpb.BatchCreateSkillsResponse
 */
export class BatchCreateSkillsResponse extends Message<BatchCreateSkillsResponse> {
  /**
   * @generated from field: repeated entpb.Skill skills = 1;
   */
  skills: Skill[] = [];

  constructor(data?: PartialMessage<BatchCreateSkillsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.BatchCreateSkillsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "skills", kind: "message", T: Skill, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCreateSkillsResponse {
    return new BatchCreateSkillsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCreateSkillsResponse {
    return new BatchCreateSkillsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCreateSkillsResponse {
    return new BatchCreateSkillsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BatchCreateSkillsResponse | PlainMessage<BatchCreateSkillsResponse> | undefined, b: BatchCreateSkillsResponse | PlainMessage<BatchCreateSkillsResponse> | undefined): boolean {
    return proto3.util.equals(BatchCreateSkillsResponse, a, b);
  }
}

/**
 * @generated from message entpb.SkillType
 */
export class SkillType extends Message<SkillType> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: repeated entpb.Skill skillType = 3;
   */
  skillType: Skill[] = [];

  constructor(data?: PartialMessage<SkillType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.SkillType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "skillType", kind: "message", T: Skill, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SkillType {
    return new SkillType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SkillType {
    return new SkillType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SkillType {
    return new SkillType().fromJsonString(jsonString, options);
  }

  static equals(a: SkillType | PlainMessage<SkillType> | undefined, b: SkillType | PlainMessage<SkillType> | undefined): boolean {
    return proto3.util.equals(SkillType, a, b);
  }
}

/**
 * @generated from message entpb.CreateSkillTypeRequest
 */
export class CreateSkillTypeRequest extends Message<CreateSkillTypeRequest> {
  /**
   * @generated from field: entpb.SkillType skill_type = 1;
   */
  skillType?: SkillType;

  constructor(data?: PartialMessage<CreateSkillTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.CreateSkillTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "skill_type", kind: "message", T: SkillType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSkillTypeRequest {
    return new CreateSkillTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSkillTypeRequest {
    return new CreateSkillTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSkillTypeRequest {
    return new CreateSkillTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSkillTypeRequest | PlainMessage<CreateSkillTypeRequest> | undefined, b: CreateSkillTypeRequest | PlainMessage<CreateSkillTypeRequest> | undefined): boolean {
    return proto3.util.equals(CreateSkillTypeRequest, a, b);
  }
}

/**
 * @generated from message entpb.GetSkillTypeRequest
 */
export class GetSkillTypeRequest extends Message<GetSkillTypeRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: entpb.GetSkillTypeRequest.View view = 2;
   */
  view = GetSkillTypeRequest_View.VIEW_UNSPECIFIED;

  constructor(data?: PartialMessage<GetSkillTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.GetSkillTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "view", kind: "enum", T: proto3.getEnumType(GetSkillTypeRequest_View) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSkillTypeRequest {
    return new GetSkillTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSkillTypeRequest {
    return new GetSkillTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSkillTypeRequest {
    return new GetSkillTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSkillTypeRequest | PlainMessage<GetSkillTypeRequest> | undefined, b: GetSkillTypeRequest | PlainMessage<GetSkillTypeRequest> | undefined): boolean {
    return proto3.util.equals(GetSkillTypeRequest, a, b);
  }
}

/**
 * @generated from enum entpb.GetSkillTypeRequest.View
 */
export enum GetSkillTypeRequest_View {
  /**
   * @generated from enum value: VIEW_UNSPECIFIED = 0;
   */
  VIEW_UNSPECIFIED = 0,

  /**
   * @generated from enum value: BASIC = 1;
   */
  BASIC = 1,

  /**
   * @generated from enum value: WITH_EDGE_IDS = 2;
   */
  WITH_EDGE_IDS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(GetSkillTypeRequest_View)
proto3.util.setEnumType(GetSkillTypeRequest_View, "entpb.GetSkillTypeRequest.View", [
  { no: 0, name: "VIEW_UNSPECIFIED" },
  { no: 1, name: "BASIC" },
  { no: 2, name: "WITH_EDGE_IDS" },
]);

/**
 * @generated from message entpb.UpdateSkillTypeRequest
 */
export class UpdateSkillTypeRequest extends Message<UpdateSkillTypeRequest> {
  /**
   * @generated from field: entpb.SkillType skill_type = 1;
   */
  skillType?: SkillType;

  constructor(data?: PartialMessage<UpdateSkillTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.UpdateSkillTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "skill_type", kind: "message", T: SkillType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSkillTypeRequest {
    return new UpdateSkillTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSkillTypeRequest {
    return new UpdateSkillTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSkillTypeRequest {
    return new UpdateSkillTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSkillTypeRequest | PlainMessage<UpdateSkillTypeRequest> | undefined, b: UpdateSkillTypeRequest | PlainMessage<UpdateSkillTypeRequest> | undefined): boolean {
    return proto3.util.equals(UpdateSkillTypeRequest, a, b);
  }
}

/**
 * @generated from message entpb.DeleteSkillTypeRequest
 */
export class DeleteSkillTypeRequest extends Message<DeleteSkillTypeRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<DeleteSkillTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.DeleteSkillTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSkillTypeRequest {
    return new DeleteSkillTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSkillTypeRequest {
    return new DeleteSkillTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSkillTypeRequest {
    return new DeleteSkillTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSkillTypeRequest | PlainMessage<DeleteSkillTypeRequest> | undefined, b: DeleteSkillTypeRequest | PlainMessage<DeleteSkillTypeRequest> | undefined): boolean {
    return proto3.util.equals(DeleteSkillTypeRequest, a, b);
  }
}

/**
 * @generated from message entpb.ListSkillTypeRequest
 */
export class ListSkillTypeRequest extends Message<ListSkillTypeRequest> {
  /**
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  /**
   * @generated from field: entpb.ListSkillTypeRequest.View view = 3;
   */
  view = ListSkillTypeRequest_View.VIEW_UNSPECIFIED;

  constructor(data?: PartialMessage<ListSkillTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.ListSkillTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "view", kind: "enum", T: proto3.getEnumType(ListSkillTypeRequest_View) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSkillTypeRequest {
    return new ListSkillTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSkillTypeRequest {
    return new ListSkillTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSkillTypeRequest {
    return new ListSkillTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSkillTypeRequest | PlainMessage<ListSkillTypeRequest> | undefined, b: ListSkillTypeRequest | PlainMessage<ListSkillTypeRequest> | undefined): boolean {
    return proto3.util.equals(ListSkillTypeRequest, a, b);
  }
}

/**
 * @generated from enum entpb.ListSkillTypeRequest.View
 */
export enum ListSkillTypeRequest_View {
  /**
   * @generated from enum value: VIEW_UNSPECIFIED = 0;
   */
  VIEW_UNSPECIFIED = 0,

  /**
   * @generated from enum value: BASIC = 1;
   */
  BASIC = 1,

  /**
   * @generated from enum value: WITH_EDGE_IDS = 2;
   */
  WITH_EDGE_IDS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ListSkillTypeRequest_View)
proto3.util.setEnumType(ListSkillTypeRequest_View, "entpb.ListSkillTypeRequest.View", [
  { no: 0, name: "VIEW_UNSPECIFIED" },
  { no: 1, name: "BASIC" },
  { no: 2, name: "WITH_EDGE_IDS" },
]);

/**
 * @generated from message entpb.ListSkillTypeResponse
 */
export class ListSkillTypeResponse extends Message<ListSkillTypeResponse> {
  /**
   * @generated from field: repeated entpb.SkillType skill_type_list = 1;
   */
  skillTypeList: SkillType[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListSkillTypeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.ListSkillTypeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "skill_type_list", kind: "message", T: SkillType, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSkillTypeResponse {
    return new ListSkillTypeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSkillTypeResponse {
    return new ListSkillTypeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSkillTypeResponse {
    return new ListSkillTypeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSkillTypeResponse | PlainMessage<ListSkillTypeResponse> | undefined, b: ListSkillTypeResponse | PlainMessage<ListSkillTypeResponse> | undefined): boolean {
    return proto3.util.equals(ListSkillTypeResponse, a, b);
  }
}

/**
 * @generated from message entpb.BatchCreateSkillTypesRequest
 */
export class BatchCreateSkillTypesRequest extends Message<BatchCreateSkillTypesRequest> {
  /**
   * @generated from field: repeated entpb.CreateSkillTypeRequest requests = 1;
   */
  requests: CreateSkillTypeRequest[] = [];

  constructor(data?: PartialMessage<BatchCreateSkillTypesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.BatchCreateSkillTypesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requests", kind: "message", T: CreateSkillTypeRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCreateSkillTypesRequest {
    return new BatchCreateSkillTypesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCreateSkillTypesRequest {
    return new BatchCreateSkillTypesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCreateSkillTypesRequest {
    return new BatchCreateSkillTypesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BatchCreateSkillTypesRequest | PlainMessage<BatchCreateSkillTypesRequest> | undefined, b: BatchCreateSkillTypesRequest | PlainMessage<BatchCreateSkillTypesRequest> | undefined): boolean {
    return proto3.util.equals(BatchCreateSkillTypesRequest, a, b);
  }
}

/**
 * @generated from message entpb.BatchCreateSkillTypesResponse
 */
export class BatchCreateSkillTypesResponse extends Message<BatchCreateSkillTypesResponse> {
  /**
   * @generated from field: repeated entpb.SkillType skill_types = 1;
   */
  skillTypes: SkillType[] = [];

  constructor(data?: PartialMessage<BatchCreateSkillTypesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "entpb.BatchCreateSkillTypesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "skill_types", kind: "message", T: SkillType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCreateSkillTypesResponse {
    return new BatchCreateSkillTypesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCreateSkillTypesResponse {
    return new BatchCreateSkillTypesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCreateSkillTypesResponse {
    return new BatchCreateSkillTypesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BatchCreateSkillTypesResponse | PlainMessage<BatchCreateSkillTypesResponse> | undefined, b: BatchCreateSkillTypesResponse | PlainMessage<BatchCreateSkillTypesResponse> | undefined): boolean {
    return proto3.util.equals(BatchCreateSkillTypesResponse, a, b);
  }
}

